package tokenizer

type (
	// StateFn is a token parsing state function, which returns next state.
	// States are called in a loop until a token is emitted using the scanner.
	StateFn func(*Lexer) StateFn

	// Tokenizer produces tokens.
	Tokenizer struct {
		s      *Lexer
		state  StateFn
		tokens chan Token
	}
)

// New returns a tokenizer initialized with the scanner and start state.
func New(input string, state StateFn) *Tokenizer {
	t := &Tokenizer{
		state:  state,
		tokens: make(chan Token, 2), // Tok + EOF.
	}
	t.s = NewScannerString(input, func(tok Token) { t.tokens <- tok })
	return t
}

// Next advances the tokenizer to the next token, which then will be available
// through the Token method. The method returns true if a token is available.
func (t *Tokenizer) Next() bool {
	for len(t.tokens) == 0 && t.state != nil {
		t.state = t.state(t.s)
	}
	return len(t.tokens) > 0
}

// Token returns the most recent token generated by a call to Next.
func (t *Tokenizer) Token() Token { return <-t.tokens }
